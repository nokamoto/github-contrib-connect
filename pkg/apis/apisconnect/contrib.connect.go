// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: apis/contrib.proto

package apisconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	apis "github.com/nokamoto/github-contrib-connect/pkg/apis"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ContribsName is the fully-qualified name of the Contribs service.
	ContribsName = "Contribs"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ContribsListContribsProcedure is the fully-qualified name of the Contribs's ListContribs RPC.
	ContribsListContribsProcedure = "/Contribs/ListContribs"
)

// ContribsClient is a client for the Contribs service.
type ContribsClient interface {
	ListContribs(context.Context, *connect.Request[apis.ListContribsRequest]) (*connect.Response[apis.ListContribsResponse], error)
}

// NewContribsClient constructs a client for the Contribs service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewContribsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ContribsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &contribsClient{
		listContribs: connect.NewClient[apis.ListContribsRequest, apis.ListContribsResponse](
			httpClient,
			baseURL+ContribsListContribsProcedure,
			opts...,
		),
	}
}

// contribsClient implements ContribsClient.
type contribsClient struct {
	listContribs *connect.Client[apis.ListContribsRequest, apis.ListContribsResponse]
}

// ListContribs calls Contribs.ListContribs.
func (c *contribsClient) ListContribs(ctx context.Context, req *connect.Request[apis.ListContribsRequest]) (*connect.Response[apis.ListContribsResponse], error) {
	return c.listContribs.CallUnary(ctx, req)
}

// ContribsHandler is an implementation of the Contribs service.
type ContribsHandler interface {
	ListContribs(context.Context, *connect.Request[apis.ListContribsRequest]) (*connect.Response[apis.ListContribsResponse], error)
}

// NewContribsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewContribsHandler(svc ContribsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	contribsListContribsHandler := connect.NewUnaryHandler(
		ContribsListContribsProcedure,
		svc.ListContribs,
		opts...,
	)
	return "/.Contribs/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ContribsListContribsProcedure:
			contribsListContribsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedContribsHandler returns CodeUnimplemented from all methods.
type UnimplementedContribsHandler struct{}

func (UnimplementedContribsHandler) ListContribs(context.Context, *connect.Request[apis.ListContribsRequest]) (*connect.Response[apis.ListContribsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Contribs.ListContribs is not implemented"))
}
